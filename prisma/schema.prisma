// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
  output        = "../src/generated/prisma"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model users {
  id         Int       @id @default(autoincrement())
  email      String    @unique @db.VarChar(256)
  password   String
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  created_by Int?
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_by Int?
  status     Int?      @default(1)
}

model products {
  id          Int       @id @default(autoincrement())
  code        String    @unique @db.VarChar(128)
  description String?
  image_url   String?
  thickness   String?
  gloss       String?
  quv         String?
  warranty    String?
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  created_by  Int?
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_by  Int?
  status      Int?      @default(1)

  product_categories product_categories[]
}

model spec_categories {
  id          Int       @id @default(autoincrement())
  code        String    @unique @db.VarChar(128)
  description String?   @db.VarChar(512)
  order       Int?
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  created_by  Int?
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_by  Int?
  status      Int?      @default(1)

  categories categories[]
}

model categories {
  id               Int       @id @default(autoincrement())
  spec_category_id Int
  code             String    @unique @db.VarChar(128)
  description      String?   @db.VarChar(512)
  created_at       DateTime? @default(now()) @db.Timestamptz(6)
  created_by       Int?
  updated_at       DateTime? @default(now()) @db.Timestamptz(6)
  updated_by       Int?
  status           Int?      @default(1)

  product_categories product_categories[]
  spec_category      spec_categories      @relation(fields: [spec_category_id], references: [id])
}

model product_categories {
  id          Int       @id @default(autoincrement())
  product_id  Int
  category_id Int
  value_1     String?
  value_2     String?
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  created_by  Int?
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_by  Int?
  status      Int?      @default(1)

  products   products   @relation(fields: [product_id], references: [id])
  categories categories @relation(fields: [category_id], references: [id])
}

model variable_configs {
  key         String    @id @db.VarChar(256)
  description String?
  var_value   String?   @db.VarChar(512)
  var_number  Float?
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  created_by  Int?
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_by  Int?
  status      Int?      @default(1)
}

model gallery_folders {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(256)
  slug        String?   @db.VarChar(512)
  cover_image String?
  is_visible  Boolean
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  created_by  Int?
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_by  Int?
  status      Int?      @default(1)

  gallery_images gallery_images[]
}

model gallery_images {
  id                Int       @id @default(autoincrement())
  gallery_folder_id Int
  image_url         String
  is_visible        Boolean
  created_at        DateTime? @default(now()) @db.Timestamptz(6)
  created_by        Int?
  updated_at        DateTime? @default(now()) @db.Timestamptz(6)
  updated_by        Int?
  status            Int?      @default(1)

  gallery_folder gallery_folders @relation(fields: [gallery_folder_id], references: [id])
}
